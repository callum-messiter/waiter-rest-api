<!DOCTYPE html>
<html lang="en">
	<head>
		<!-- THIS IS A SIMPLE DEMONSTRATION OF THE LIVEKITCHEN SYSTEM USING WEBSOCKETS. IT IS MEANT FOR CLIENT-APP DEVELOPERS TO 
			 GRASP HOW TO INTERFACE WITH THE LIVEKITCHEN ON THEIR END.
		-->
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>Customer 1 - My Order</title>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.js"></script>
		<!-- Latest compiled and minified CSS -->
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css"
		integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous">
		</head>
		<body>
			<script>
				window.onload=function(){
					// 1) Create a socket to the server - now we're listening for events 
					const socket = io.connect("http://localhost:3000/");

					// This stuff is just for visualising the LiveKitchen system
					const btn = document.getElementById('send');
					const output = document.getElementById('output');

					/**
						2)  Here we'll build a *mock* order object, using the *authentic* order schema

							a) The orderId should be a random text string generated by the server once it receives an order from the mobile client. (It will need to query an indexed Orders table to ensure ID uniqueness)
					
							b) The customerId should be stored locally on the mobile app (not sure exactly how this works)
							c) The restaurantId will be retrieved by the client app once the user accesses a particular restuarant's menu. We should think about the best to get this value to the app
							d) It will need to contain an array of itemIds, so that the server can verify the total price by checking the items in the db
							e) The mobile client should of course calculate the totaly price on its end, and send it

							Note: the server is responsible for (1) generating the orderId, (2) setting the initial status, and (3) updating the `paid` attribute when the transaction is processed 
					**/
					/**
						MOCK ORDER DATA
					**/ 	
					const customerId = 'customer1';
					const restaurantId = 'SkxjHgNYRb';
					// The user's jwt token that is provided to the client by the server should be sent so we can verify orders. The client will be disconnected if the token is invalid
					const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhbGdvcml0aG0iOiJIUzI1NiIsImlzc3VlciI6Imh0dHA6Ly9hcGkud2FpdGVyLmNvbSIsImlhdCI6MTUwNzIzNjc5MjU4MSwiZXhwIjoxNTA3ODQxNTkyNTgxLCJ1c2VySWQiOjEsInVzZXJSb2xlIjoyMDB9.tNkcHIq988_UGB5062Emb-sPVFXAkFnjAkWUu7JO1sw';
					// The item data should be retrievable by the menu loaded in the client app
					const items = [
						{
							itemId: 1,
							name: 'Fish and Chips',
							price: 5.00
						},
						{
							itemId: 2,
							name: 'Chicken Curry',
							price: 5.00
						}
					];

					const order = {
						headers: {
							token: token
						},
						data: {
							items: items,
							customerId: customerId,
							restaurantId: restaurantId,
							tableNo: Math.floor(Math.random() * (40 - 1 + 1)) + 1, // random number just for simulation purposes
							price: 15.00 // The price woul be calculated by the client app (by iterating over the array perhaps)
						}
					}

					/**
						3) Send the order to the server 
					**/
					btn.addEventListener('click', function() {
						socket.emit('newOrder', order);
					});

					/**
						4) We listen for updates to our order's status. The client app should, upon receiving such an event, send a push notification to the user's phone to inform them of the new status.

						The restaurant will be added to the customer's socket.io "room" when the server receives from the restaurant the first status update of the customer's order. Then the server will broadcast the status update to everyone in that room, except for the sender (the restaurant)
					**/
					socket.on('newStatus', function(orderStatus) {
						output.innerHTML = '<p>Your order has been '+orderStatus+'</p>'; // e.g. "accepted"
					});

					/**
						5) If the token sent in the order headers is invalid, the server will disconnect the client, so the client should handle this appropriately
					**/
					socket.on('disconnect', function() {
						output.innerHTML = '<p>Your order is unauthorised - you have been disconnected from LiveKitchen.</p>';
					});

				}
			</script>
			<div class="container">
				<div class="row justify-content-center title-row">
					<div class="col-xs-10">
						<h1 class="welcome">Customer 1 - My Order</h1>
						<button id="send">Send</button>
						<div id="output">Your order has been sent to the kitchen!</div>
					</div>
			</div>
  	</body>
</html>